jobs: # using jobs so they each run in parallel

- job: deploycontainerHealthService
  timeoutInMinutes: 120 # extend the default timeout of 60min since getting a certificate from Lets Encrypt sometimes takes a while
  displayName: 'Deploy HealthService workload'
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Install workload healthservice on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # Must match the workload name in the workloads JSON file
          $workloadName = "healthservice"

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON
          $globalInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputGlobalInfra/*.json | Get-Content | ConvertFrom-JSON

          $acrName = $globalInfraDeployOutput.acr_name.value # Container Registry Name (from terraform output)
          $acrUrl = $globalInfraDeployOutput.acr_login_server.value # Container Registry Login Server (from terraform output)

          $workloadsFile = "$(System.DefaultWorkingDirectory)/.ado/pipelines/config/workloads.json"

          if(-not (Test-Path $workloadsFile))
          {
            throw "*** Container workload file not found at $workloadsFile"
          }

          $workloads = Get-Content $workloadsFile | ConvertFrom-JSON
          $workload = $workloads.$workloadName

          if(-not $workload)
          {
            throw "*** Workload '$workloadName' not found in $workloadsFile"
          }

          $chartRegistry,$chartName = $workload.chart.name -split "/",2

          # if the helm chart is hosted on ACR, we need to log in first
          if($chartRegistry.EndsWith(".azurecr.io"))
          {
            az acr login -n $chartRegistry
          }

          # We can assume that the image was imported into our ACR in an earlier stage of this pipeline
          $fullContainerImageName = "$acrUrl/$($workload.containerImage.name):$($workload.containerImage.tag)"

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace"

            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            echo "*** Installing helm chart $($workload.chart.name) version $($workload.chart.version) with image $fullContainerImageName"

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            # Apply workload worker helm chart
            echo  "*** Deploy healthservice to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            helm upgrade --install healthservice-workload "oci://$($workload.chart.name)" `
                         --version $workload.chart.version `
                         --namespace $(workloadNamespace) --create-namespace `
                         --set containerimage="$fullContainerImageName" `
                         --set azure.region="$region" `
                         --set workload.domainname="$fqdn" `
                         --wait

            # Wait for the ingress certificate to be provisioned by cert-manager
            $retrycount = 0;
            $maxretrycount = 30
            $sleepSeconds = 60
            do {

              $certificateName = "workload-ingress-secret"

              # checking if certificate for workload-ingress-secret was issued
              if ($(kubectl get certificates $certificateName -n $(workloadNamespace) -o 'jsonpath={..status.conditions[?(@.type==\"Ready\")].status}') -ne "True")
              {
                $certReady = $false

                $retrycount++
                echo "Certificate for $certificateName not ready. Waiting for $sleepSeconds seconds and retrying... $retrycount/$maxretrycount";
                Start-Sleep $sleepSeconds
              }
              else
              {
                echo "Certificate $certificateName is ready!"
                $certReady = $true
                break
              }
            } while ( $retrycount -lt $maxretrycount )

            if(-not $certReady)
            {
              throw "*** Error - Certificate $certificateName was not provisioned in time"
            }
          }

- job: deploycontainerCatalogService
  displayName: 'Deploy CatalogService workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Install workload CatalogService on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # Must match the workload name in the workloads JSON file
          $workloadName = "catalogservice"

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          $workloadsFile = "$(System.DefaultWorkingDirectory)/.ado/pipelines/config/workloads.json"

          if(-not (Test-Path $workloadsFile))
          {
            throw "*** Container workload file not found at $workloadsFile"
          }

          $workloads = Get-Content $workloadsFile | ConvertFrom-JSON
          $workload = $workloads.$workloadName

          if(-not $workload)
          {
            throw "*** Workload '$workloadName' not found in $workloadsFile"
          }

          $chartRegistry,$chartName = $workload.chart.name -split "/",2

          # if the helm chart is hosted on ACR, we need to log in first
          if($chartRegistry.EndsWith(".azurecr.io"))
          {
            az acr login -n $chartRegistry
          }

          # We can assume that the image was imported into our ACR in an earlier stage of this pipeline
          $fullContainerImageName = "$(acr_login_server)/$($workload.containerImage.name):$($workload.containerImage.tag)"

          echo "*** Retrieved Azure Front Door Header ID $(frontdoor_id_header) from Terraform output"
          echo "*** Retrieved Azure Front Door FQDN $(frontdoor_fqdn) from Terraform output"

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the Region of the EH namespace as a workaround since this has the right format for the Cosmos SDK ("East US 2" instead of "eastus2")
            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace"

            # load AKS cluster credentials
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            # Apply workload CatalogService helm chart
            echo "*** Installing helm chart $($workload.chart.name) version $($workload.chart.version) with image $fullContainerImageName"
            helm upgrade --install workload-catalogservice "oci://$($workload.chart.name)" `
                         --version $workload.chart.version `
                         --namespace "$(workloadNamespace)" `
                         --create-namespace `
                         --set azure.frontdoorid="$(frontdoor_id_header)" `
                         --set azure.region="$region" `
                         --set containerimage="$fullContainerImageName" `
                         --set workload.domainname="$fqdn" `
                         --wait
          }

- job: deploycontainerBackgroundProcessor
  displayName: 'Deploy BackgroundProcessor workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - task: AzureCLI@2
      displayName: 'Install workload BackgroundProcessor on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # Must match the workload name in the workloads JSON file
          $workloadName = "backgroundprocessor"

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          $workloadsFile = "$(System.DefaultWorkingDirectory)/.ado/pipelines/config/workloads.json"

          if(-not (Test-Path $workloadsFile))
          {
            throw "*** Container workload file not found at $workloadsFile"
          }

          $workloads = Get-Content $workloadsFile | ConvertFrom-JSON
          $workload = $workloads.$workloadName

          if(-not $workload)
          {
            throw "*** Workload '$workloadName' not found in $workloadsFile"
          }

          $chartRegistry,$chartName = $workload.chart.name -split "/",2

          # if the helm chart is hosted on ACR, we need to log in first
          if($chartRegistry.EndsWith(".azurecr.io"))
          {
            az acr login -n $chartRegistry
          }

          # We can assume that the image was imported into our ACR in an earlier stage of this pipeline
          $fullContainerImageName = "$(acr_login_server)/$($workload.containerImage.name):$($workload.containerImage.tag)"

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the Region of the EH namespace as a workaround since this has the right format for the Cosmos SDK ("East US 2" instead of "eastus2")
            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace"

            # Load AKS / K8s cluster credentials via az aks get-credentials (using IAM permissions)
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            # Apply workload BackgroundProcessor helm chart
            echo "*** Installing helm chart $($workload.chart.name) version $($workload.chart.version) with image $fullContainerImageName"
            helm upgrade --install workload-backgroundprocessor "oci://$($workload.chart.name)" `
                         --version $workload.chart.version `
                         --namespace $(workloadNamespace) `
                         --create-namespace `
                         --set containerimage="$fullContainerImageName" `
                         --set azure.region="$region" `
                         --wait
          }

- job: deployuiapp
  displayName: 'Deploy UI App to Storage Account'
  steps:

    - download: current # download pipeline artifacts

    - task: AzureCLI@2
      displayName: 'Upload UI app to Blob Storage'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          $configFilePath = "$(Pipeline.Workspace)/uiApp/config.js"
          # load JSON data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            echo "*** Uploading UI app to storage account $($stamp.public_storage_account_name) in stamp $($stamp.location)"

            $keyVaultName = $stamp.key_vault_name
            $appInsightsConnString = $(az keyvault secret show --name APPLICATIONINSIGHTS-CONNECTION-STRING --vault-name $keyVaultName --query "value" -o tsv)

            # remove config.js file, which needs to be regenerated for each environment
            echo "*** Deleting the old config.js file"
            Remove-Item -Path $configFilePath

            echo "*** Storing configuration to $configFilePath"
            # warning: make sure that these variable names are in sync with client code
            Add-Content -Path $configFilePath -Value "window.API_URL = `"/catalogservice/api`""
            Add-Content -Path $configFilePath -Value "window.APPLICATIONINSIGHTS_CONNECTION_STRING = `"$appInsightsConnString`""

            $versionLabel = "$(riVariant)-$("$(Build.SourceBranch)" -Replace 'refs/heads/', '')-$(Build.BuildId)"
            echo "*** DEBUG: Setting VERSION_LABEL to $versionLabel"
            Add-Content -Path $configFilePath -Value "window.VERSION_LABEL = `"$versionLabel`""

            # clear the storage container first, before uploading, to remove any stale files
            echo "*** Clearing storage container"
            az storage blob delete-batch --account-name $stamp.public_storage_account_name --source '$web' --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on clearing storage account $($stamp.public_storage_account_name)"
            }

            # upload compiled code to Storage $web container
            echo "*** Uploading UI application to Blob Storage"
            az storage blob upload-batch --account-name $stamp.public_storage_account_name --destination '$web' --source $(Pipeline.Workspace)/uiApp/ --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on upload to storage account $($stamp.public_storage_account_name)"
            }
          }
