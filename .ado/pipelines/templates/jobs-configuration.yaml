parameters:
  - name: runChaosTesting
    type: boolean
    default: true

jobs:
- job: deployconfiguration
  displayName: 'Deploy K8s Configuration'
  steps:

  - download: current # download pipeline artifacts

  - template: steps-buildagent-prerequisites.yaml

  - task: AzureCLI@2
    displayName: 'Install ingress-nginx $(ingressNginxVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          echo "*** Configuring stamp in region $($stamp.location)"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Gather Ingress Load Balancer IP from pipeline artifact json
          $aksIngressIp = $stamp.aks_cluster_ingress_ip_address

          # Deploy ingress-nginx (helm) configuration
          echo "*** Installing nginx ingress controller ($aksIngressIp) on $aksClusterName in $aksClusterResourceGroup"
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          $ingressNamespace = "ingress-nginx"

          echo "*** Create namespace '$ingressNamespace' on AKS cluster $aksClusterName via kubectl"
          kubectl create namespace $ingressNamespace  `
                    --dry-run=client --output yaml | kubectl apply -f -

          # Deploy helm chart for ingress-nginx using a custom load balancer ip and resource group
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx `
                --namespace $ingressNamespace `
                --values src/config/ingress-nginx/values.helm.yaml `
                --set controller.service.loadBalancerIP="$aksIngressIp" `
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="$aksClusterResourceGroup" `
                --version "$(ingressNginxVersion)"
        }

  - task: AzureCLI@2
    displayName: 'Configure OMSAgent (Container Insights) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Apply ConfigMap which configures OMS Agent's log and metric collection. Take a look at the reference file to understand what is being collected/excluded
          echo "*** Apply configmap for OMSAgent (Container Insights) on $aksClusterName"
          kubectl apply -f src/config/monitoring/container-azm-ms-agentconfig.yaml
        }

  - task: AzureCLI@2
    displayName: 'Install OpenTelemetry collector on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON
        $globalInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputGlobalInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Application Insights Instrumentation Key
          foreach($monitoringstamp in $globalInfraDeployOutput.monitoringstamp_properties.value) {
            if ($monitoringstamp.location -eq $stamp.location) {
              echo "*** Found AppInsights instance for stamp location $($stamp.location)"
              $appInsightsInstrumentationKey = $monitoringstamp.appinsights_instrumentation_key
            }
          }

          # Fail if no AppInsights instrumentation key for a given location is found
          if ($appInsightsInstrumentationKey -eq "") {
            echo "*** Application Insights Instrumentation Key not found for $stamp.location"
            exit
          }

          # Define Kubernetes namespace where OpenTelemetry Collector will be deployed
          $openTelemetryNamespace = "opentelemetry"

          echo "*** Create namespace '$openTelemetryNamespace' on AKS cluster $aksClusterName via kubectl"
          kubectl create namespace $openTelemetryNamespace `
                    --dry-run=client --output yaml | kubectl apply -f -

          helm upgrade --install opentelemetry-collector-appinsights src/config/monitoring/chart/opentelemetry-collector-appinsights `
                       --namespace $openTelemetryNamespace `
                       --set azuremonitor.instrumentationKey="$appInsightsInstrumentationKey"
        }

  - task: AzureCLI@2
    displayName: 'Install cert-manager $(certManagerVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          # Deploy required custom resource definitions needed for cert-manager
          echo "*** Apply cert-manager CRDs on $aksClusterName"
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/$(certManagerVersion)/cert-manager.crds.yaml

          $certManagerNamespace = "cert-manager"

          echo "*** Create namespace '$certManagerNamespace' on AKS cluster $aksClusterName via kubectl"
          kubectl create namespace $certManagerNamespace `
                    --dry-run=client --output yaml | kubectl apply -f -

          echo "*** Setting up cert-manager ClusterIssuer with Let's Encrypt"
          helm upgrade --install cert-manager-config src/config/cert-manager/chart/cert-manager-config`
                       --namespace $certManagerNamespace `
                       --set letsencrypt.contactEmail="$(contactEmail)"

          echo "*** Installing cert-manager via helm on $aksClusterName"
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager `
                       --values src/config/cert-manager/values.helm.yaml `
                       --namespace $certManagerNamespace `
                       --version "$(certManagerVersion)"
        }

  - task: AzureCLI@2
    displayName: 'Install KeyVault CSI driver on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # Retrieve current TenantID
        $tenantId = $(az account show --query "tenantId" --output tsv)

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # load AKS cluster credentials
          az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

          echo "*** Create namespace $(workloadNamespace) on AKS cluster $aksClusterName via kubectl"
          kubectl create namespace $(workloadNamespace) `
                    --dry-run=client --output yaml | kubectl apply -f -

          echo "*** Configuring CSI secret driver on $aksClusterName via helm"

          # Gather Azure KeyVault name from terraform artifact
          $keyVaultName = $stamp.key_vault_name
          echo "*** Retrieved Key Vault name $keyVaultName"

          $allSecretNames = $(az keyvault secret list --vault-name $keyVaultName --query "join(',',[].name)" --output tsv)
          echo "*** Retrieved the names of $($allSecretNames.Split(',').Count) secrets in Key Vault $keyVaultName"

          $kubeletIdentityClientId = $(az aks show --resource-group $aksClusterResourceGroup --name $aksClusterName `
                                                   --query "identityProfile.kubeletidentity.clientId" --output tsv)

          echo "*** Retrieved Kubelet clientId $kubeletIdentityClientId for cluster $clusterName"

          helm upgrade --install csi-secrets-driver src/config/csi-secrets-driver/chart/csi-secrets-driver-config `
                        --namespace "$(workloadNamespace)" `
                        --set azure.tenantId=$tenantId `
                        --set azure.keyVaultName="$keyVaultName" `
                        --set azure.managedIdentityClientId="$kubeletIdentityClientId" `
                        --set kvSecrets="{$allSecretNames}"
        }

  - ${{ if eq(parameters.runChaosTesting, 'true') }}:
    - task: AzureCLI@2
      displayName: "Install Chaos Mesh $(chaosMeshVersion) on AKS clusters"
      retryCountOnTaskFailure: 1
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # load json data from downloaded pipeline artifact json
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

            # load AKS cluster credentials
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            echo "*** Create namespace $(chaosTestingNamespace) on AKS cluster $aksClusterName via kubectl"
            kubectl create namespace $(chaosTestingNamespace) --dry-run=client --output yaml | kubectl apply -f -

            $helmOutput = helm list --namespace=$(chaosTestingNamespace) -o json | ConvertFrom-Json
            if($helmOutput.name.length.equals(0))
            {
              echo "*** Chaos mesh does not exist on the cluster yet -- installing now"

              echo "*** Add Chaos Mesh Helm repo"
              # Add Chaos Mesh Helm Repo
              helm repo add chaos-mesh https://charts.chaos-mesh.org
              helm repo update

              # Install Chaos Mesh 
              helm install chaos-mesh chaos-mesh/chaos-mesh `
                            --namespace=$(chaosTestingNamespace) `
                            --version=$(chaosMeshVersion) `
                            --set chaosDaemon.runtime=containerd `
                            --set chaosDaemon.socketPath=/run/containerd/containerd.sock
            }
            else
            {
              echo "*** Chaos mesh already exists on the cluster"
            }
          }
